{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var tbody = document.querySelector(\"tbody\");\n    var activeRow = null;\n    var editingCell = null;\n    // eslint-disable-next-line no-shadow\n    function addRow(name, position, office, age, salary) {\n        var tr = document.createElement(\"tr\");\n        tr.insertCell().textContent = name;\n        tr.insertCell().textContent = position;\n        tr.insertCell().textContent = office;\n        tr.insertCell().textContent = age;\n        tr.insertCell().textContent = salary;\n        tr.addEventListener(\"click\", function() {\n            return highlightRow(tr);\n        });\n        Array.from(tr.children).forEach(function(cell) {\n            return editFunction(cell);\n        });\n        return tr;\n    }\n    function highlightRow(row) {\n        if (activeRow) activeRow.classList.remove(\"active\");\n        row.classList.add(\"active\");\n        activeRow = row;\n    }\n    function parseTable() {\n        var rows = document.querySelectorAll(\"table tbody tr\");\n        return Array.from(rows).map(function(row) {\n            var cells = row.querySelectorAll(\"td\");\n            return {\n                name: cells[0].textContent.trim(),\n                position: cells[1].textContent.trim(),\n                office: cells[2].textContent.trim(),\n                age: cells[3].textContent.trim(),\n                salary: cells[4].textContent.trim()\n            };\n        });\n    }\n    function renderTable(items) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                tbody.append(addRow(row.name, row.position, row.office, row.age, row.salary));\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    }\n    function sortRowsOnClick() {\n        var parseCurrency = function(value) {\n            return parseFloat(value.replace(/[^0-9.-]+/g, \"\")) || 0;\n        };\n        var sortState = {};\n        var sortTable = function(columnIndex, isNumeric, ascending) {\n            var table = document.querySelector(\"table\");\n            var tableBody = table.querySelector(\"tbody\");\n            var rows = Array.from(tableBody.querySelectorAll(\"tr\"));\n            rows.sort(function(rowA, rowB) {\n                var cellA = rowA.children[columnIndex].textContent.trim();\n                var cellB = rowB.children[columnIndex].textContent.trim();\n                var comparison;\n                if (isNumeric) comparison = parseCurrency(cellA) - parseCurrency(cellB);\n                else comparison = cellA.localeCompare(cellB);\n                return ascending ? -comparison : comparison;\n            });\n            rows.forEach(function(row) {\n                return tableBody.appendChild(row);\n            });\n        };\n        var ths = document.querySelectorAll(\"thead th\");\n        ths.forEach(function(th, index) {\n            sortState[index] = \"asc\";\n            th.addEventListener(\"click\", function() {\n                var headerText = th.textContent.trim();\n                var isNumeric = headerText === \"Salary\" || headerText === \"Age\";\n                var currentSortState = sortState[index];\n                var newSortState = currentSortState === \"asc\" ? \"desc\" : \"asc\";\n                sortState[index] = newSortState;\n                sortTable(index, isNumeric, newSortState === \"asc\");\n                th.classList.toggle(\"asc\", newSortState === \"asc\");\n                th.classList.toggle(\"desc\", newSortState === \"desc\");\n            });\n        });\n    }\n    function createModal() {\n        var modalOverlay = document.createElement(\"div\");\n        modalOverlay.className = \"modal-overlay\";\n        var modal = document.createElement(\"div\");\n        modal.className = \"modal\";\n        modal.innerHTML = '\\n      <form class=\"new-employee-form\">\\n        <label>Name: <input name=\"name\" type=\"text\" data-qa=\"name\"></label>\\n        <label>Position: <input name=\"position\" type=\"text\" data-qa=\"position\"></label>\\n        <label>Office:\\n          <select name=\"office\" data-qa=\"office\">\\n            <option value=\"Tokyo\">Tokyo</option>\\n            <option value=\"Singapore\">Singapore</option>\\n            <option value=\"London\">London</option>\\n            <option value=\"New York\">New York</option>\\n            <option value=\"Edinburgh\">Edinburgh</option>\\n            <option value=\"San Francisco\">San Francisco</option>\\n          </select>\\n        </label>\\n        <label>Age: <input name=\"age\" type=\"number\" data-qa=\"age\"></label>\\n        <label>Salary: <input name=\"salary\" type=\"number\" data-qa=\"salary\"></label>\\n        <button type=\"button\" id=\"save-button\">Save to table</button>\\n      </form>\\n  ';\n        modalOverlay.appendChild(modal);\n        document.body.appendChild(modalOverlay);\n        document.getElementById(\"save-button\").addEventListener(\"click\", saveButton);\n    }\n    function saveButton() {\n        var form = document.querySelector(\".new-employee-form\");\n        var formData = new FormData(form);\n        // eslint-disable-next-line no-shadow\n        var name = formData.get(\"name\");\n        var position = formData.get(\"position\");\n        var office = formData.get(\"office\");\n        var age = parseInt(formData.get(\"age\"), 10);\n        var salary = parseFloat(formData.get(\"salary\")).toFixed(2);\n        if (validForm(name, position, office, age, salary)) {\n            tbody.appendChild(addRow(name, position, office, age, \"$\".concat(parseInt(salary).toLocaleString(\"en-US\"))));\n            showNotification(\"Employee successfully added.\", \"success\");\n        }\n    }\n    // eslint-disable-next-line no-shadow\n    function validForm(name, position, office, age, salary) {\n        var isValid = true;\n        if (name.length >= 1 && name.length < 4) {\n            showNotification(\"Name must be at least 4 characters long.\", \"error\");\n            isValid = false;\n        }\n        if (age < 18 || age > 90) {\n            showNotification(\"Age must be between 18 and 90.\", \"error\");\n            isValid = false;\n        }\n        if (!name.trim() || !position.trim() || !office || !age || !salary) {\n            showNotification(\"All fields are required.\", \"error\");\n            isValid = false;\n        }\n        return isValid;\n    }\n    function showNotification(message, type) {\n        var notification = document.createElement(\"div\");\n        notification.className = \"notification \".concat(type);\n        notification.setAttribute(\"data-qa\", \"notification\");\n        notification.innerHTML = '<span class=\"title\">'.concat(type.toUpperCase(), \"</span> \").concat(message);\n        document.body.appendChild(notification);\n        setTimeout(function() {\n            notification.remove();\n        }, 3000);\n    }\n    function editFunction(cell) {\n        cell.addEventListener(\"dblclick\", function() {\n            if (editingCell) saveEdit(editingCell);\n            if (editingCell !== cell) {\n                startEdit(cell);\n                editingCell = cell;\n            }\n        });\n    }\n    function startEdit(cell) {\n        var originalText = cell.textContent.trim();\n        cell.textContent = \"\";\n        var input = document.createElement(\"input\");\n        input.className = \"cell-input\";\n        input.value = originalText;\n        cell.appendChild(input);\n        input.focus();\n        input.addEventListener(\"blur\", function() {\n            return saveEdit(cell);\n        });\n        input.addEventListener(\"keydown\", function(e) {\n            if (e.key === \"Enter\") saveEdit(cell);\n            else if (e.key === \"Escape\") cancelEdit(cell, originalText);\n        });\n    }\n    function saveEdit(cell) {\n        var input = cell.querySelector(\"input\");\n        if (input) {\n            var newValue = input.value.trim();\n            cell.textContent = newValue === \"\" ? input.defaultValue : newValue;\n            editingCell = null;\n        }\n    }\n    function cancelEdit(cell, originalText) {\n        cell.textContent = originalText;\n        editingCell = null;\n    }\n    function init() {\n        createModal();\n        sortRowsOnClick();\n        var tableContent = parseTable();\n        tbody.innerHTML = \"\";\n        renderTable(tableContent);\n    }\n    init();\n});\n\n//# sourceMappingURL=index.56126301.js.map\n","'use strict';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const tbody = document.querySelector('tbody');\n  let activeRow = null;\n  let editingCell = null;\n\n  // eslint-disable-next-line no-shadow\n  function addRow(name, position, office, age, salary) {\n    const tr = document.createElement('tr');\n\n    tr.insertCell().textContent = name;\n    tr.insertCell().textContent = position;\n    tr.insertCell().textContent = office;\n    tr.insertCell().textContent = age;\n    tr.insertCell().textContent = salary;\n\n    tr.addEventListener('click', () => highlightRow(tr));\n    Array.from(tr.children).forEach((cell) => editFunction(cell));\n\n    return tr;\n  }\n\n  function highlightRow(row) {\n    if (activeRow) {\n      activeRow.classList.remove('active');\n    }\n    row.classList.add('active');\n    activeRow = row;\n  }\n\n  function parseTable() {\n    const rows = document.querySelectorAll('table tbody tr');\n\n    return Array.from(rows).map((row) => {\n      const cells = row.querySelectorAll('td');\n\n      return {\n        name: cells[0].textContent.trim(),\n        position: cells[1].textContent.trim(),\n        office: cells[2].textContent.trim(),\n        age: cells[3].textContent.trim(),\n        salary: cells[4].textContent.trim(),\n      };\n    });\n  }\n\n  function renderTable(items) {\n    for (const row of items) {\n      tbody.append(\n        addRow(row.name, row.position, row.office, row.age, row.salary),\n      );\n    }\n  }\n\n  function sortRowsOnClick() {\n    const parseCurrency = (value) => {\n      return parseFloat(value.replace(/[^0-9.-]+/g, '')) || 0;\n    };\n\n    const sortState = {};\n\n    const sortTable = (columnIndex, isNumeric, ascending) => {\n      const table = document.querySelector('table');\n      const tableBody = table.querySelector('tbody');\n      const rows = Array.from(tableBody.querySelectorAll('tr'));\n\n      rows.sort((rowA, rowB) => {\n        const cellA = rowA.children[columnIndex].textContent.trim();\n        const cellB = rowB.children[columnIndex].textContent.trim();\n\n        let comparison;\n\n        if (isNumeric) {\n          comparison = parseCurrency(cellA) - parseCurrency(cellB);\n        } else {\n          comparison = cellA.localeCompare(cellB);\n        }\n\n        return ascending ? -comparison : comparison;\n      });\n\n      rows.forEach((row) => tableBody.appendChild(row));\n    };\n\n    const ths = document.querySelectorAll('thead th');\n\n    ths.forEach((th, index) => {\n      sortState[index] = 'asc';\n\n      th.addEventListener('click', () => {\n        const headerText = th.textContent.trim();\n        const isNumeric = headerText === 'Salary' || headerText === 'Age';\n        const currentSortState = sortState[index];\n        const newSortState = currentSortState === 'asc' ? 'desc' : 'asc';\n\n        sortState[index] = newSortState;\n\n        sortTable(index, isNumeric, newSortState === 'asc');\n\n        th.classList.toggle('asc', newSortState === 'asc');\n        th.classList.toggle('desc', newSortState === 'desc');\n      });\n    });\n  }\n\n  function createModal() {\n    const modalOverlay = document.createElement('div');\n\n    modalOverlay.className = 'modal-overlay';\n\n    const modal = document.createElement('div');\n\n    modal.className = 'modal';\n\n    modal.innerHTML = `\n      <form class=\"new-employee-form\">\n        <label>Name: <input name=\"name\" type=\"text\" data-qa=\"name\"></label>\n        <label>Position: <input name=\"position\" type=\"text\" data-qa=\"position\"></label>\n        <label>Office:\n          <select name=\"office\" data-qa=\"office\">\n            <option value=\"Tokyo\">Tokyo</option>\n            <option value=\"Singapore\">Singapore</option>\n            <option value=\"London\">London</option>\n            <option value=\"New York\">New York</option>\n            <option value=\"Edinburgh\">Edinburgh</option>\n            <option value=\"San Francisco\">San Francisco</option>\n          </select>\n        </label>\n        <label>Age: <input name=\"age\" type=\"number\" data-qa=\"age\"></label>\n        <label>Salary: <input name=\"salary\" type=\"number\" data-qa=\"salary\"></label>\n        <button type=\"button\" id=\"save-button\">Save to table</button>\n      </form>\n  `;\n\n    modalOverlay.appendChild(modal);\n    document.body.appendChild(modalOverlay);\n\n    document\n      .getElementById('save-button')\n      .addEventListener('click', saveButton);\n  }\n\n  function saveButton() {\n    const form = document.querySelector('.new-employee-form');\n    const formData = new FormData(form);\n\n    // eslint-disable-next-line no-shadow\n    const name = formData.get('name');\n    const position = formData.get('position');\n    const office = formData.get('office');\n    const age = parseInt(formData.get('age'), 10);\n    const salary = parseFloat(formData.get('salary')).toFixed(2);\n\n    if (validForm(name, position, office, age, salary)) {\n      tbody.appendChild(\n        addRow(\n          name,\n          position,\n          office,\n          age,\n          `$${parseInt(salary).toLocaleString('en-US')}`,\n        ),\n      );\n\n      showNotification('Employee successfully added.', 'success');\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  function validForm(name, position, office, age, salary) {\n    let isValid = true;\n\n    if (name.length >= 1 && name.length < 4) {\n      showNotification('Name must be at least 4 characters long.', 'error');\n      isValid = false;\n    }\n\n    if (age < 18 || age > 90) {\n      showNotification('Age must be between 18 and 90.', 'error');\n      isValid = false;\n    }\n\n    if (!name.trim() || !position.trim() || !office || !age || !salary) {\n      showNotification('All fields are required.', 'error');\n      isValid = false;\n    }\n\n    return isValid;\n  }\n\n  function showNotification(message, type) {\n    const notification = document.createElement('div');\n\n    notification.className = `notification ${type}`;\n    notification.setAttribute('data-qa', 'notification');\n    notification.innerHTML = `<span class=\"title\">${type.toUpperCase()}</span> ${message}`;\n\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n      notification.remove();\n    }, 3000);\n  }\n\n  function editFunction(cell) {\n    cell.addEventListener('dblclick', () => {\n      if (editingCell) {\n        saveEdit(editingCell);\n      }\n\n      if (editingCell !== cell) {\n        startEdit(cell);\n        editingCell = cell;\n      }\n    });\n  }\n\n  function startEdit(cell) {\n    const originalText = cell.textContent.trim();\n\n    cell.textContent = '';\n\n    const input = document.createElement('input');\n\n    input.className = 'cell-input';\n    input.value = originalText;\n\n    cell.appendChild(input);\n    input.focus();\n\n    input.addEventListener('blur', () => saveEdit(cell));\n\n    input.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') {\n        saveEdit(cell);\n      } else if (e.key === 'Escape') {\n        cancelEdit(cell, originalText);\n      }\n    });\n  }\n\n  function saveEdit(cell) {\n    const input = cell.querySelector('input');\n\n    if (input) {\n      const newValue = input.value.trim();\n\n      cell.textContent = newValue === '' ? input.defaultValue : newValue;\n      editingCell = null;\n    }\n  }\n\n  function cancelEdit(cell, originalText) {\n    cell.textContent = originalText;\n    editingCell = null;\n  }\n\n  function init() {\n    createModal();\n    sortRowsOnClick();\n\n    const tableContent = parseTable();\n\n    tbody.innerHTML = '';\n    renderTable(tableContent);\n  }\n\n  init();\n});\n"],"names":["document","addEventListener","modalOverlay","modal","parseCurrency","sortState","sortTable","tableContent","tbody","querySelector","activeRow","editingCell","addRow","name","position","office","age","salary","tr","createElement","insertCell","textContent","classList","remove","row","add","Array","from","children","forEach","cell","editFunction","originalText","input","saveEdit","trim","className","value","appendChild","focus","e","key","showNotification","message","type","notification","concat","setAttribute","innerHTML","toUpperCase","body","setTimeout","newValue","defaultValue","getElementById","isValid","formData","FormData","get","parseInt","parseFloat","toFixed","length","toLocaleString","replace","columnIndex","isNumeric","ascending","tableBody","table","rows","querySelectorAll","sort","rowA","rowB","comparison","cellA","cellB","localeCompare","ths","th","index","headerText","newSortState","currentSortState","toggle","map","cells","renderTable","items","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","append","err","return"],"version":3,"file":"index.56126301.js.map"}